<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope.github.io/v1/comment/rss.xml" rel="self" type="application/rss+xml"/>
    <title>评论插件</title>
    <link>https://vuepress-theme-hope.github.io/v1/comment/zh/</link>
    <description>VuePress 的评论插件</description>
    <language>zh-CN</language>
    <pubDate>Sat, 24 Sep 2022 09:28:45 GMT</pubDate>
    <lastBuildDate>Sat, 24 Sep 2022 09:28:45 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed1</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>MIT Licensed | Copyright © 2019-present Mr.Hope</copyright>
    <item>
      <title>Giscus 选项</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/config/giscus.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/config/giscus.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Giscus 选项</source>
      <pubDate>Fri, 03 Jun 2022 13:24:41 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="repo"> repo</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>存放评论的仓库</p>
<h2 id="repoid"> repoId</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>仓库 ID，请从 <a href="https://giscus.app/zh-CN" target="_blank" rel="noopener noreferrer">Giscus 页面<i>Content not supported</i></a> 生成。</p>
<h2 id="category"> category</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>讨论分类</p>
<h2 id="categoryid"> categoryId</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>讨论分类 ID，请从 <a href="https://giscus.app/zh-CN" target="_blank" rel="noopener noreferrer">Giscus 页面<i>Content not supported</i></a> 生成。</p>
<h2 id="mapping"> mapping</h2>
<ul>
<li>类型: <code>string</code></li>
<li>默认值: <code>&quot;pathname&quot;</code></li>
</ul>
<p>页面 ↔️ discussion 映射关系，详见 <a href="https://giscus.app/zh-CN" target="_blank" rel="noopener noreferrer">Giscus 页面<i>Content not supported</i></a>。</p>
<h2 id="reactionsenabled"> reactionsEnabled</h2>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>true</code></li>
</ul>
<p>是否启用主帖子上的反应</p>
<h2 id="inputposition"> inputPosition</h2>
<ul>
<li>类型: <code>&quot;top&quot; | &quot;bottom&quot;</code></li>
<li>默认值: <code>&quot;top&quot;</code></li>
</ul>
<p>输入框的位置</p>
]]></content:encoded>
    </item>
    <item>
      <title>Twikoo 选项</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/config/twikoo.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/config/twikoo.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Twikoo 选项</source>
      <pubDate>Fri, 03 Jun 2022 13:24:41 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="envid"> envId</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>腾讯云环境 ID 或 Vercel 地址。</p>
<h2 id="repoid"> repoId</h2>
<ul>
<li>类型: <code>string</code></li>
<li>默认值: <code>&quot;ap-shanghai&quot;</code></li>
</ul>
<p>腾讯云区域。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Giscus</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/giscus.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/giscus.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Giscus</source>
      <description>Giscus 是一个基于 GitHub Discussion 的评论系统，启用简便。
</description>
      <pubDate>Fri, 03 Jun 2022 13:24:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>Giscus 是一个基于 GitHub Discussion 的评论系统，启用简便。</p>

<h2 id="准备工作"> 准备工作</h2>
<ol>
<li>你需要创建一个公开仓库，并开启评论区，以作为评论存放的地点</li>
<li>你需要安装 <a href="https://github.com/apps/giscus" target="_blank" rel="noopener noreferrer">Giscus App<i>Content not supported</i></a>，使其有权限访问对应仓库。</li>
</ol>
<p>在完成以上步骤后，请前往 <a href="https://giscus.app/zh-CN" target="_blank" rel="noopener noreferrer">Giscus 页面<i>Content not supported</i></a> 获得你的设置。你只需要填写仓库和 Discussion 分类，之后滚动到页面下部的 “启用 giscus” 部分，复制 <code>data-repo</code>, <code>data-repo-id</code>, <code>data-category</code> 和 <code>data-category-id</code> 四项，因为它们是必须的。</p>
<h2 id="配置"> 配置</h2>
<p>请将 <code>data-repo</code>, <code>data-repo-id</code>, <code>data-category</code> 和 <code>data-category-id</code> 作为插件选项传入 <code>repo</code>, <code>repoId</code>, <code>category</code> <code>categoryId</code>。</p>
<div><p>夜间模式</p>
<p>为了能使 Giscus 使用正确的主题，你需要为 <code>&lt;CommentService /&gt;</code> 通过 <code>darkmode</code> 属性传入一个布尔值，代表当前是否开启夜间模式。</p>
</div>
<p>其他的配置项详见 <a href="./../config/giscus.html">Giscus 配置</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Twikoo</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/twikoo.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/twikoo.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Twikoo</source>
      <description>一个简洁、安全、免费的静态网站评论系统，基于 腾讯云开发Content not supported。
</description>
      <pubDate>Fri, 03 Jun 2022 13:24:41 GMT</pubDate>
      <content:encoded><![CDATA[<p>一个简洁、安全、免费的静态网站评论系统，基于 <a href="https://curl.qcloud.com/KnnJtUom" target="_blank" rel="noopener noreferrer">腾讯云开发<i>Content not supported</i></a>。</p>

<h2 id="快速上手"> 快速上手</h2>
<p>部署共有四种方式。</p>
<table>
<thead>
<tr>
<th>部署方式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>[不建议] 虽然方便，但是仅支持按量计费环境——也就是说，<strong>一键部署的环境，当免费资源用尽后，将会产生费用</strong>。且按量计费环境无法切换为包年包月环境。免费额度数据库读操作数只有 500 次 / 天，<strong>无法支撑 Twikoo 的运行需求</strong>。</td>
</tr>
<tr>
<td></td>
<td>[建议] 手动部署到腾讯云云开发环境，在中国大陆访问速度较快。由于基础版 1 已从 0 元涨价至 6.9 元 / 月，需要付费购买环境才能部署。</td>
</tr>
<tr>
<td></td>
<td>[不建议] 仅针对有 Node.js 经验的开发者。</td>
</tr>
<tr>
<td></td>
<td>[建议] 适用于想要免费部署的用户，在中国大陆访问速度较慢。</td>
</tr>
</tbody>
</table>
<h3 id="一键部署"> 一键部署</h3>
<ol>
<li>
<p>点击以下按钮将 Twikoo 一键部署到云开发</p>
<p><a href="https://console.cloud.tencent.com/tcb/env/index?action=CreateAndDeployCloudBaseProject&amp;appUrl=https%3A%2F%2Fgithub.com%2Fimaegoo%2Ftwikoo&amp;branch=dev" target="_blank" rel="noopener noreferrer"><img src="https://main.qcloudimg.com/raw/67f5a389f1ac6f3b4d04c7256438e44f.svg" alt="部署到云开发"><i>Content not supported</i></a></p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/env/login" target="_blank" rel="noopener noreferrer">环境 - 登录授权<i>Content not supported</i></a>，启用“匿名登录”</p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/env/safety" target="_blank" rel="noopener noreferrer">环境 - 安全配置<i>Content not supported</i></a>，将网站域名添加到“WEB 安全域名”</p>
</li>
</ol>
<h3 id="手动部署"> 手动部署</h3>
<p>如果你打算部署到一个现有的云开发环境，请直接从第 3 步开始。</p>
<ol>
<li>
<p>进入<a href="https://curl.qcloud.com/KnnJtUom" target="_blank" rel="noopener noreferrer">云开发 CloudBase<i>Content not supported</i></a>活动页面，滚动到“新用户专享”部分，选择适合的套餐，点击“立即购买”，按提示创建好环境。</p>
<div><p>提示</p>
<ul>
<li>推荐创建上海环境。如选择广州环境，需要在 <code>twikoo.init()</code> 时额外指定环境 <code>region: &quot;ap-guangzhou&quot;</code></li>
<li>环境名称自由填写</li>
<li>推荐选择计费方式<code>包年包月</code>，套餐版本<code>基础版 1</code>，超出免费额度不会收费</li>
<li>如果提示选择“应用模板”，请选择“空模板”</li>
</ul>
</div>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/" target="_blank" rel="noopener noreferrer">云开发控制台<i>Content not supported</i></a><br></p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/env/login" target="_blank" rel="noopener noreferrer">环境-登录授权<i>Content not supported</i></a>，启用“匿名登录”</p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/env/safety" target="_blank" rel="noopener noreferrer">环境-安全配置<i>Content not supported</i></a>，将网站域名添加到“WEB 安全域名”</p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/scf/index" target="_blank" rel="noopener noreferrer">环境-云函数<i>Content not supported</i></a>，点击“新建云函数”</p>
</li>
<li>
<p>函数名称请填写 <code>twikoo</code>，创建方式请选择 <code>空白函数</code>，运行环境请选择 <code>Nodejs 10.15</code>，函数内存请选择 <code>128MB</code>，点击“下一步”</p>
</li>
<li>
<p>清空输入框中的示例代码，复制以下代码、粘贴到“函数代码”输入框中，点击“确定”</p>
<div><pre><code>exports<span>.</span>main <span>=</span> <span>require</span><span>(</span><span>"twikoo-func"</span><span>)</span><span>.</span>main<span>;</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>创建完成后，点击“twikoo”进入云函数详情页，进入“函数代码”标签，点击“文件 - 新建文件”，输入 <code>package.json</code>，回车</p>
</li>
<li>
<p>复制以下代码、粘贴到代码框中，点击“保存并安装依赖”</p>
<div><pre><code><span>{</span> <span>"dependencies"</span><span>:</span> <span>{</span> <span>"twikoo-func"</span><span>:</span> <span>"1.5.0"</span> <span>}</span> <span>}</span>
</code></pre>
<div><span>1</span><br></div></div></li>
</ol>
<h3 id="命令行部署"> 命令行部署</h3>
<div><p>注意</p>
<ul>
<li>请确保你已经安装了 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener noreferrer">Node.js<i>Content not supported</i></a></li>
<li>请将命令、代码中“你的环境 ID”替换为你自己的环境 ID</li>
<li>第 7 步会弹出浏览器要求授权，需在有图形界面的系统下进行</li>
<li>请勿在 Termux 下操作。虽然可以部署成功，但是使用时会报错 <code>[FUNCTIONS_EXECUTE_FAIL] Error: EACCES: permission denied, open '/var/user/index.js'</code></li>
</ul>
</div>
<p>如果你打算部署到一个现有的云开发环境，请直接从第 3 步开始。</p>
<ol>
<li>
<p>进入<a href="https://curl.qcloud.com/KnnJtUom" target="_blank" rel="noopener noreferrer">云开发 CloudBase<i>Content not supported</i></a>活动页面，滚动到“新用户专享”部分，选择适合的套餐 (一般 0 元套餐即可) ，点击“立即购买”，按提示创建好环境。</p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/" target="_blank" rel="noopener noreferrer">云开发控制台<i>Content not supported</i></a></p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/env/login" target="_blank" rel="noopener noreferrer">环境 - 登录授权<i>Content not supported</i></a>，启用“匿名登录”</p>
</li>
<li>
<p>进入<a href="https://console.cloud.tencent.com/tcb/env/safety" target="_blank" rel="noopener noreferrer">环境 - 安全配置<i>Content not supported</i></a>，将网站域名添加到“WEB 安全域名”</p>
</li>
<li>
<p>克隆本仓库</p>
<div><pre><code><span>git</span> clone https://github.com/imaegoo/twikoo.git <span># 或 git clone https://e.coding.net/imaegoo/twikoo/twikoo.git</span>
<span>cd</span> twikoo
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>如果你没有安装 Git，也可以从 <a href="https://github.com/imaegoo/twikoo/releases" target="_blank" rel="noopener noreferrer">Release<i>Content not supported</i></a> 页面下载最新的 Source code</p>
<p>如果你所在的地区访问 GitHub 速度慢，也可以尝试另一个仓库地址: <a href="https://imaegoo.coding.net/public/twikoo/twikoo/git" target="_blank" rel="noopener noreferrer">https://imaegoo.coding.net/public/twikoo/twikoo/git<i>Content not supported</i></a></p>
</blockquote>
</li>
<li>
<p>安装依赖项</p>
<div><pre><code><span>npm</span> <span>install</span> -g <span>yarn</span> <span># 如 yarn 已安装，可以跳过此步</span>
<span>yarn</span> <span>install</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>授权云开发环境 (此命令会弹出浏览器要求授权，需在有图形界面的系统下进行)</p>
<div><pre><code><span>yarn</span> run login
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>自动部署</p>
<div><pre><code><span>yarn</span> deploy -e 你的环境id
</code></pre>
<div><span>1</span><br></div></div></li>
</ol>
<h3 id="vercel-部署"> Vercel 部署</h3>
<p><a href="https://www.bilibili.com/video/BV1Fh411e7ZH" target="_blank" rel="noopener noreferrer">查看视频教程<i>Content not supported</i></a></p>
<ol>
<li>
<p>申请 <a href="https://www.mongodb.com/cloud/atlas/register" target="_blank" rel="noopener noreferrer">MongoDB<i>Content not supported</i></a> 账号</p>
</li>
<li>
<p>创建免费 MongoDB 数据库，区域推荐选择 <code>AWS / N. Virginia (us-east-1)</code></p>
</li>
<li>
<p>在 Clusters 页面点击 CONNECT，按步骤设置允许所有 IP 地址的连接 (<a href="https://vercel.com/support/articles/how-to-allowlist-deployment-ip-address" target="_blank" rel="noopener noreferrer">为什么？<i>Content not supported</i></a>) ，创建数据库用户，并记录数据库连接字符串，请将连接字符串中的 <code>&lt;password&gt;</code> 修改为数据库密码</p>
</li>
<li>
<p>申请 <a href="https://vercel.com/signup" target="_blank" rel="noopener noreferrer">Vercel<i>Content not supported</i></a> 账号</p>
</li>
<li>
<p>点击以下按钮将 Twikoo 一键部署到 Vercel</p>
<p><a href="https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/dev/src/vercel-min" target="_blank" rel="noopener noreferrer"><img src="https://vercel.com/button" alt="Vercel"><i>Content not supported</i></a></p>
</li>
<li>
<p>进入 Settings - Environment Variables，添加环境变量 <code>MONGODB_URI</code>，值为第 3 步的数据库连接字符串</p>
</li>
<li>
<p>进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</p>
</li>
<li>
<p>Vercel Domains (包含 <code>https://</code> 前缀，例如 <code>https://xxx.vercel.app</code>) 即为你的环境 ID</p>
</li>
</ol>
]]></content:encoded>
      <enclosure url="https://main.qcloudimg.com/raw/67f5a389f1ac6f3b4d04c7256438e44f.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>插件选项</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/config/</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/config/</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">插件选项</source>
      <pubDate>Wed, 01 Jun 2022 12:28:53 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="type"> type</h2>
<ul>
<li>类型: <code>&quot;Giscus&quot; | &quot;Twikoo&quot; | &quot;Waline&quot; | 'Valine' | 'Vssue' | &quot;None&quot;</code></li>
<li>默认值: <code>&quot;None&quot;</code></li>
</ul>
<p>使用的评论服务。</p>
<h2 id="comment"> comment</h2>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认: <code>true</code></li>
</ul>
<p>是否默认启用评论功能。</p>
<h2 id="giscus-选项"> Giscus 选项</h2>
<ul>
<li><a href="./giscus.html">点击查看</a></li>
</ul>
<h2 id="waline-选项"> Waline 选项</h2>
<ul>
<li><a href="./waline.html">点击查看</a></li>
</ul>
<h2 id="twikoo-选项"> Twikoo 选项</h2>
<ul>
<li><a href="./twikoo.html">点击查看</a></li>
</ul>
<h2 id="vssue-选项"> Vssue 选项</h2>
<ul>
<li><a href="./vssue.html">点击查看</a></li>
</ul>
<h2 id="valine-选项"> Valine 选项</h2>
<ul>
<li><a href="./valine.html">点击查看</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>指南</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">指南</source>
      <pubDate>Wed, 01 Jun 2022 12:28:53 GMT</pubDate>
      <content:encoded><![CDATA[<p>此插件会全局注册评论组件 <code>&lt;CommentService /&gt;</code>。</p>
<p>推荐将评论组件 (<code>&lt;CommentService /&gt;</code>) 插入在 <code>&lt;PageNav /&gt;</code> 组件后。</p>
<p><code>&lt;CommentService /&gt;</code> 组件默认全局启用。你可以在特定页面的 frontmatter 中设置 <code>comment: false</code> 来局部禁用它。</p>
<p>如果你需要保持全局禁用，请在插件选项中设置 <code>comment</code> 为 <code>false</code>。这样你可以在特定页面的 frontmatter 中设置 <code>comment: true</code> 来局部启用它。</p>
<p>目前可以从 Giscus、Waline 和 Twikoo 中选择。</p>
<div><p>评论服务选择</p>
<ul>
<li>如果你的博客或文档主要面向程序员，建议使用 Giscus。</li>
<li>如果你的博客或文档面向大众，建议使用 Waline。</li>
</ul>
</div>
<h2 id="giscus"> Giscus</h2>
<p><a href="./giscus.html">详见 Giscus 指南</a></p>
<h2 id="waline"> Waline</h2>
<p><a href="./waline.html">详见 Waline 指南</a></p>
<h2 id="twikoo"> Twikoo</h2>
<p><a href="./twikoo.html">详见 Twikoo 指南</a></p>
<h3 id="vssue"> Vssue</h3>
<p><a href="./vssue.html">详见 Vssue 指南</a></p>
<h3 id="valine"> Valine</h3>
<p><a href="./valine.html">详见 Valine 指南</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Waline 选项</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/config/waline.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/config/waline.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Waline 选项</source>
      <pubDate>Sun, 16 May 2021 15:14:54 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="serverurl"> serverURL</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>Waline 的服务端地址。</p>
<h2 id="emoji"> emoji</h2>
<ul>
<li>类型: <code>(string | WalineEmojiInfo)[] | false</code></li>
<li>默认值: <code>['//unpkg.com/@waline/emojis@1.0.1/weibo']</code></li>
</ul>
<p>表情设置，详见 <a href="https://waline.js.org/guide/client/emoji.html" target="_blank" rel="noopener noreferrer">自定义表情<i>Content not supported</i></a></p>
<h2 id="dark"> dark</h2>
<ul>
<li>类型: <code>string | boolean</code></li>
<li>默认值: <code>false</code></li>
</ul>
<p>暗黑模式适配。</p>
<ul>
<li>设置布尔值会根据其值来设置暗黑模式。</li>
<li>设置 <code>'auto'</code> 会根据设备暗黑模式自适应。</li>
<li>填入 CSS 选择器会在对应选择器生效时启用夜间模式。</li>
</ul>
<div><p>针对不同主题的例子</p>
<ul>
<li>
<p><strong>Docusaurus</strong>: 它会在 <code>&lt;html&gt;</code> 上通过设置 <code>data-theme=&quot;dark&quot;</code> 开启暗黑模式，那么你需要将 <code>dark</code> 选项设置为 <code>'html[data-theme=&quot;dark&quot;]'</code>。</p>
</li>
<li>
<p><strong>hexo-theme-fluid</strong>: 它会在 <code>&lt;html&gt;</code> 上通过设置 <code>data-user-color-scheme=&quot;dark&quot;</code> 开启暗黑模式。那么你需要将 <code>dark</code> 选项设置为 <code>'html[data-user-color-scheme=&quot;dark&quot;]'</code>。</p>
</li>
<li>
<p><strong>vuepress-theme-hope</strong>: 它会在 <code>&lt;body&gt;</code> 上添加<code>theme-dark</code> class 来开启暗黑模式。那么你需要将 <code>dark</code> 选项设置为 <code>bodyhtml.dark</code>。</p>
</li>
</ul>
</div>
<p>自定义样式与深色模式详见 <a href="https://waline.js.org/guide/client/style.html" target="_blank" rel="noopener noreferrer">自定义样式<i>Content not supported</i></a>。</p>
<h2 id="meta"> meta</h2>
<ul>
<li>类型: <code>string[]</code></li>
<li>默认值: <code>['nick', 'mail', 'link']</code></li>
</ul>
<p>评论者相关属性。可选值: <code>'nick'</code>, <code>'mail'</code>, <code>'link'</code></p>
<h2 id="requiredmeta"> requiredMeta</h2>
<ul>
<li>类型: <code>string[]</code></li>
<li>默认值: <code>[]</code></li>
</ul>
<p>设置<strong>必填项</strong>，默认匿名，可选值:</p>
<ul>
<li><code>[]</code></li>
<li><code>['nick']</code></li>
<li><code>['nick', 'mail']</code></li>
</ul>
<h2 id="login"> login</h2>
<ul>
<li>类型: <code>string</code></li>
<li>默认值: <code>'enable'</code></li>
</ul>
<p>登录模式状态，可选值:</p>
<ul>
<li><code>'enable'</code>: 启用登录 (默认)</li>
<li><code>'disable'</code>: 禁用登录，用户只能填写信息评论</li>
<li><code>'force'</code>: 强制登录，用户必须注册并登录才可发布评论</li>
</ul>
<h2 id="wordlimit"> wordLimit</h2>
<ul>
<li>类型: <code>number | [number, number]</code></li>
<li>默认值: <code>0</code></li>
</ul>
<p>评论字数限制。填入单个数字时为最大字数限制。设置为 <code>0</code> 时无限制。</p>
<h2 id="pagesize"> pageSize</h2>
<ul>
<li>类型: <code>number</code></li>
<li>默认值: <code>10</code></li>
</ul>
<p>评论列表分页，每页条数。</p>
<h2 id="copyright"> copyright</h2>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>true</code></li>
<li>必填: 否</li>
</ul>
<p>是否显示页脚版权信息。</p>
<div><p>Tips</p>
<p>我们希望你保持打开以支持 Waline。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Waline</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/waline.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/waline.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Waline</source>
      <description>欢迎使用 Waline，只需几个步骤，你就可以在你的网站中启用 Waline 提供评论与浏览量服务。
</description>
      <pubDate>Sun, 16 May 2021 15:14:54 GMT</pubDate>
      <content:encoded><![CDATA[<p>欢迎使用 Waline，只需几个步骤，你就可以在你的网站中启用 Waline 提供评论与浏览量服务。</p>

<h2 id="leancloud-设置-数据库"> LeanCloud 设置 (数据库)</h2>
<ol>
<li>
<p><a href="https://console.leancloud.app/login" target="_blank" rel="noopener noreferrer">登录<i>Content not supported</i></a> 或 <a href="https://console.leancloud.app/register" target="_blank" rel="noopener noreferrer">注册<i>Content not supported</i></a> <code>LeanCloud 国际版</code> 并进入 <a href="https://console.leancloud.app/apps" target="_blank" rel="noopener noreferrer">控制台<i>Content not supported</i></a></p>
</li>
<li>
<p>点击左下角 <a href="https://console.leancloud.app/apps" target="_blank" rel="noopener noreferrer">创建应用<i>Content not supported</i></a> 并起一个你喜欢的名字 (请选择免费的开发版):</p>
<p><img src="./assets/leancloud-1.jpeg" alt="创建应用"></p>
</li>
<li>
<p>进入应用，选择左下角的 <code>设置</code> &gt; <code>应用 Key</code>。你可以看到你的 <code>APP ID</code>,<code>APP Key</code> 和 <code>Master Key</code>。后续我们会用到这三个值。</p>
<p><img src="./assets/leancloud-2.jpeg" alt="ID 和 Key"></p>
</li>
</ol>
<div><p>Note</p>
<p>如果你正在使用 Leancloud 国内版 (<a href="https://leancloud.cn" target="_blank" rel="noopener noreferrer">leancloud.cn<i>Content not supported</i></a>)，我们推荐你切换到国际版 (<a href="https://leancloud.app" target="_blank" rel="noopener noreferrer">leancloud.app<i>Content not supported</i></a>)。否则，你需要为应用额外绑定<strong>已备案</strong>的域名:</p>
<ul>
<li>登录国内版并进入需要使用的应用</li>
<li>选择 <code>设置</code> &gt; <code>域名绑定</code> &gt; <code>API 访问域名</code> &gt; <code>绑定新域名</code> &gt; 输入域名 &gt; <code>确定</code>。</li>
<li>按照页面上的提示按要求在 DNS 上完成 CNAME 解析。</li>
</ul>
<p><img src="./assets/leancloud-3.png" alt="域名设置"></p>
</div>
<h2 id="vercel-部署-服务端"> Vercel 部署 (服务端)</h2>
<p><a href="https://vercel.com/import/project?template=https://github.com/walinejs/waline/tree/main/example" target="_blank" rel="noopener noreferrer"><img src="https://vercel.com/button" alt="Vercel"><i>Content not supported</i></a></p>
<ol>
<li>
<p>点击上方按钮，跳转至 Vercel 进行 Server 端部署。</p>
</li>
<li>
<p>如果你未登录的话，Vercel 会让你注册或登录，请使用 GitHub 账户进行快捷登录。</p>
</li>
<li>
<p>输入一个你喜欢的 Vercel 项目名称并点击 <code>Create</code> 继续:</p>
<p><img src="./assets/vercel-1.png" alt="创建项目"></p>
</li>
<li>
<p>此时会让你创建 Team 账号，这里选择 <code>Skip</code> 即可：</p>
<p><img src="./assets/vercel-2.png" alt="skip team"></p>
</li>
<li>
<p>此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。</p>
<p><img src="./assets/vercel-3.png" alt="deploy"></p>
<p>一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 <code>Go to Dashboard</code> 可以跳转到应用的控制台。</p>
<p><img src="./assets/vercel-4.png" alt="deploy"></p>
</li>
<li>
<p>点击顶部的 <code>Settings</code> - <code>Environment Variables</code> 进入环境变量配置页，并配置三个环境变量<code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。</p>
<p><img src="./assets/vercel-5.png" alt="设置环境变量"></p>
<div><p>Tips</p>
<p>如果你使用 LeanCloud 国内版，请额外配置 <code>LEAN_SERVER</code> 环境变量，值为你绑定好的域名。</p>
</div>
</li>
<li>
<p>环境变量配置完成之后点击顶部的 <code>Deployments</code> 点击顶部最新的一次部署右侧的 <code>Redeploy</code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</p>
<p><img src="./assets/vercel-6.png" alt="redeploy"></p>
</li>
<li>
<p>此时会跳转到 <code>Overview</code> 界面开始部署，等待片刻后 <code>STATUS</code> 会变成 <code>Ready</code>。此时请点击 <code>Visit</code> ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。</p>
<p><img src="./assets/vercel-7.png" alt="redeploy success"></p>
</li>
</ol>
<h2 id="客户端"> 客户端</h2>
<h3 id="使用插件"> 使用插件</h3>
<p>在插件选项中设置 <code>type: &quot;waline&quot;</code>，同时设置服务端地址 <code>serverURL</code> 为上一步获取到的值。</p>
<p>此时，将 <code>&lt;CommentService&gt;</code> 组件放置在你网站中合适的位置 (通常是页面的底部)，即可使用 Waline 评论功能。</p>
<div><p>Tips</p>
<p>你也可以传入其他 Waline 支持的选项 (除了 <code>el</code>)。</p>
<p>详情请见 <a href="./../config/waline.html">Waline 配置</a></p>
</div>
<h2 id="评论管理-管理端"> 评论管理 (管理端)</h2>
<ol>
<li>部署完成后，请访问 <code>&lt;serverURL&gt;/ui/register</code> 进行注册。首个注册的人会被设定成管理员。</li>
<li>管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。</li>
<li>用户也通过评论框注册账号，登陆后会跳转到自己的档案页。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Valine 选项</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/config/valine.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/config/valine.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Valine 选项</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="appid"> appId</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>填入 LeanCloud 中应用的 APP ID</p>
<h2 id="appkey"> appKey</h2>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 是</li>
</ul>
<p>填入 LeanCloud 中应用的 APP Key</p>
<h2 id="comment"> comment</h2>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>true</code></li>
</ul>
<p>留言功能</p>
<h2 id="visitor"> visitor</h2>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>true</code></li>
</ul>
<p>文章访问量统计功能</p>
<h2 id="pagesize"> pageSize</h2>
<ul>
<li>类型: <code>number</code></li>
<li>默认值: <code>10</code></li>
</ul>
<p>评论列表分页，每页条数</p>
<h2 id="recordip"> recordIP</h2>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>false</code></li>
</ul>
<p>是否记录评论者 IP</p>
<h2 id="更多-valine-配置项"> 更多 Valine 配置项</h2>
<ul>
<li>
<p><strong>placeholder</strong></p>
<ul>
<li>类型: <code>string</code></li>
<li>默认值: <code>'请留言'</code></li>
</ul>
<p>评论框的 placeholder</p>
</li>
<li>
<p><strong>meta</strong></p>
<ul>
<li>类型: <code>string[]</code></li>
<li>默认值: <code>['nick','mail']</code></li>
</ul>
</li>
</ul>
<p>评论者相关属性</p>
<ul>
<li>
<p><strong>requiredFields</strong></p>
<ul>
<li>类型: <code>string[]</code></li>
<li>默认值: <code>['nick']</code></li>
</ul>
</li>
</ul>
<p>设置必填项</p>
<ul>
<li>
<p><strong>enableQQ</strong></p>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>true</code></li>
</ul>
</li>
</ul>
<p>是否启用昵称框自动获取 QQ 昵称和 QQ 头像</p>
<ul>
<li>
<p><strong>avatar</strong></p>
<ul>
<li>类型: <code>string</code></li>
<li>默认值: <code>'retro'</code></li>
</ul>
<p>Gravatar 头像展示方式。</p>
<div><p>可选值</p>
<ul>
<li>''(空字符串): Gravatar 官方图形</li>
<li><code>mp</code>: 神秘人(一个灰白头像)</li>
<li><code>identicon</code>: 抽象几何图形</li>
<li><code>monsterid</code>: 小怪物</li>
<li><code>wavatar</code></li>
<li><code>retro</code></li>
<li><code>robohash</code></li>
<li><code>hide</code></li>
</ul>
<p>具体相关说明详见 <a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener noreferrer">Valine 头像配置<i>Content not supported</i></a></p>
<p>你可以引导用户到 <a href="http://cn.gravatar.com/" target="_blank" rel="noopener noreferrer">Gravatar<i>Content not supported</i></a> 去设置自己的头像。</p>
</div>
</li>
<li>
<p><strong>emojiCDN</strong></p>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置表情包 CDN，请参考 <a href="https://valine.js.org/emoji.html" target="_blank" rel="noopener noreferrer">Valine 自定义表情包<i>Content not supported</i></a></p>
</li>
<li>
<p><strong>emojiMaps</strong></p>
<ul>
<li>类型: <code>Object</code></li>
<li>默认值: <code>null</code></li>
</ul>
<p>设置表情包映射，请参考 <a href="https://valine.js.org/emoji.html" target="_blank" rel="noopener noreferrer">Valine 自定义表情包<i>Content not supported</i></a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Vssue 选项</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/config/vssue.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/config/vssue.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Vssue 选项</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="platform"> platform</h2>
<p><code>@vssue/vuepress-plugin-vssue</code> 会自动根据你设置的 <code>platform</code> 为你解析对应的 API 包:</p>
<ul>
<li>Platform <code>github</code> - API 包 <code>@vssue/api-github-v3</code></li>
<li>Platform <code>github-v4</code> - API 包 <code>@vssue/api-github-v4</code></li>
<li>Platform <code>gitlab</code> - API 包 <code>@vssue/api-gitlab-v4</code></li>
<li>Platform <code>bitbucket</code> - API 包 <code>@vssue/api-bitbucket-v2</code></li>
<li>Platform <code>gitee</code> - API 包 <code>@vssue/api-gitee-v5</code></li>
<li>Platform <code>gitea</code> - API 包 <code>@vssue/api-gitea-v1</code></li>
</ul>
<h2 id="owner"> owner</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>用来存储 Issue 和评论的仓库的拥有者的名称。可能是一个用户，也可能是一个组织 (<strong>GitHub Organization</strong> / <strong>Gitlab Group</strong> / <strong>Bitbucket Team</strong>)</p>
<p>Vssue 将通过 <code>owner</code> 和 <code>repo</code> 在平台上定位这个仓库。</p>
</li>
<li>
<p><strong>参考</strong>: </p>
</li>
</ul>
<h2 id="repo"> repo</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>用来存储 Issue 和评论的仓库的名称。</p>
<p>Vssue 将通过 <code>owner</code> 和 <code>repo</code> 在平台上定位这个仓库。</p>
</li>
<li>
<p><strong>参考</strong>: </p>
</li>
</ul>
<div><p>Tips</p>
<p>仓库 URL 的常见模式是 <code>`${baseURL}/${owner}/${repo}`</code>:</p>
<ul>
<li>GitHub: <code>https://github.com/${owner}/${repo}</code></li>
<li>Gitlab: <code>https://gitlab.com/${owner}/${repo}</code></li>
<li>Bitbucket: <code>https://bitbucket.org/${owner}/${repo}</code></li>
<li>Gitee: <code>https://gitee.com/${owner}/${repo}</code></li>
</ul>
</div>
<h2 id="clientid"> clientId</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>在 <a href="https://tools.ietf.org/html/rfc6749#section-2.3.1" target="_blank" rel="noopener noreferrer">OAuth2 spec<i>Content not supported</i></a> 中介绍的 <code>client_id</code>。</p>
<p>它是由平台分配的 client 标识符。你在创建 OAuth App 之后就可以得到它。</p>
<p>Vssue 将使用 <code>clientId</code> 来获取用户的 access token。</p>
</li>
<li>
<p><strong>参考</strong>:</p>
<ul>
<li><a href="./../guide/supported-platforms.html">创建 OAuth App</a></li>
</ul>
</li>
</ul>
<h2 id="clientsecret"> clientSecret</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>undefined</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>在 <a href="https://tools.ietf.org/html/rfc6749#section-2.3.1" target="_blank" rel="noopener noreferrer">OAuth2 spec<i>Content not supported</i></a> 中介绍的 <code>client_secret</code>。</p>
<p>它是由平台生成的 client 密钥。你在创建 OAuth App 之后就可以得到它。</p>
<p>在和某些平台一起使用时， Vssue 将使用 <code>clientId</code> 和 <code>clientSecret</code> 来获取用户的 access token。</p>
<div><p>Tips</p>
<p>一些平台 (如 Bitbucket 和 GitLab) 支持 <a href="https://tools.ietf.org/html/rfc6749#section-4.2" target="_blank" rel="noopener noreferrer">Implicit Grant<i>Content not supported</i></a>，所以在使用这些平台时不需要 <code>clientSecret</code>。</p>
<p>然而，有一些平台 (如 GitHub 和 Gitee) 不支持它，所以在使用这些平台时 <code>clientSecret</code> 是必须的。</p>
</div>
</li>
<li>
<p><strong>参考</strong>:</p>
<ul>
<li></li>
<li></li>
<li><a href="./../guide/supported-platforms.html">创建 OAuth App</a></li>
</ul>
</li>
</ul>
<h2 id="baseurl"> baseURL</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>undefined</code> (根据不同平台变化)</p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>平台的 base URL。</p>
<p>对于我们支持的平台，默认值为:</p>
<ul>
<li>GitHub 是 <code>'https://github.com'</code></li>
<li>Gitlab 是 <code>'https://gitlab.com'</code></li>
<li>Bitbucket 是<code>'https://bitbucket.org'</code></li>
<li>Gitee 是<code>'https://gitee.com'</code></li>
</ul>
<div><p>注意</p>
<p>只有在你要使用 <strong>自行搭建的</strong> 平台时才需要设置这个选项。 (比如 <strong>GitLab Community / Enterprise Edition</strong> 或 <strong>GitHub Enterprise Server</strong>)</p>
</div>
</li>
<li>
<p><strong>参考</strong>:</p>
<ul>
<li><a href="./../guide/github.html">GitHub OAuth App</a></li>
<li><a href="./../guide/gitlab.html">GitLab Application</a></li>
</ul>
</li>
</ul>
<h2 id="state"> state</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>'Vssue'</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>在 <a href="https://tools.ietf.org/html/rfc6749#section-4.1.1" target="_blank" rel="noopener noreferrer">OAuth2 spec<i>Content not supported</i></a> 中介绍的 <code>state</code>。</p>
<p>Vssue 将会在重定向到平台认证界面时发送它，并在平台认证返回后检查它是否正确。</p>
<p>它是被设计用来避免 <a href="https://tools.ietf.org/html/rfc6749#section-10.12" target="_blank" rel="noopener noreferrer">CSRF<i>Content not supported</i></a> 的，但是由于我们所有东西都在静态页面上，所以它没有太大作用。忽略这个选项，或者随便设置成什么值都行。</p>
</li>
</ul>
<h2 id="labels"> labels</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string[]</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>['Vssue']</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>用来设置 Vssue 使用的 Issue 的 labels (标签) 。</p>
<p>Vssue 只会请求拥有对应标签的 Issue，忽略其他的 Issue。Vssue 通过 <code>title</code> 和 <code>labels</code> 来确定用来存储评论的对应 Issue。传入多个字符串可以设置多个标签，只有同时满足这些标签的 Issue 才会被 Vssue 请求。</p>
<div><p>Tips</p>
<p>Bitbucket 目前不支持 Issue 标签功能，所以如果你使用 Bitbucket 的话，这个选项将会被忽略。</p>
<p>GitHub 支持在标签名称中加入 emoji，如 <code>[':heart:Vssue', ':mailbox:Comments']</code>。</p>
</div>
</li>
<li>
<p><strong>参考</strong>: </p>
</li>
</ul>
<h2 id="prefix"> prefix</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>'[Vssue]'</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>Issue 标题的前缀。用于生成存储评论的对应 Issue 的实际标题。</p>
<p>举例来说，如果 <code>prefix</code> 是 <code>'[Vssue]'</code>，<code>title</code> 是 <code>'Vssue Demo'</code>，那么 Issue 的实际标题就是 <code>'[Vssue]Vssue Demo'</code>。</p>
<p>如果 <code>title</code> 的类型是 <code>Function</code>，这个选项将会被忽略。</p>
</li>
<li>
<p><strong>参考</strong>: </p>
</li>
</ul>
<h2 id="admins"> admins</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string[]</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>[]</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>拥有 admin 权限的用户数组。<code>owner</code> 始终视为拥有 admin 权限。</p>
<p>拥有 admin 权限的用户可以删除所有用户的评论，而其他用户只能删除自己的评论。</p>
<p>只有 <code>admins</code> 才能在存储评论的 Issue 不存在时自动创建它。</p>
<div><p>Tips</p>
<p>在 <code>owner</code> 是一个组织而不是用户时，可以将你的用户名添加进 <code>admins</code> 来自动创建对应 Issue。</p>
</div>
</li>
<li>
<p><strong>参考</strong>: </p>
</li>
</ul>
<h2 id="perpage"> perPage</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>number</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>10</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>默认每页显示的评论数。</p>
</li>
</ul>
<h2 id="locale"> locale</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>undefined</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>使用的语言。</p>
<p>不设置该选项时，Vssue 会使用 <code>window.navigator.languages</code> 中的语言，如果其中没有 Vssue 支持的语言则会默认使用 <code>'en'</code>。</p>
<div><p>Tips</p>
<p>Vssue 使用 <a href="https://kazupon.github.io/vue-i18n/" target="_blank" rel="noopener noreferrer">vue-i18n<i>Content not supported</i></a> 实现国际化，但是并不会影响你的 Vue 应用的其他部分。
如果你在项目中已经使用了 vue-i18n，也不会对 Vssue 造成影响。</p>
<p>语言包在 <a href="https://github.com/meteorlxy/vssue/tree/master/packages/vssue/src/i18n/langs" target="_blank" rel="noopener noreferrer">src/i18n/langs<i>Content not supported</i></a> 目录下。目前我们支持:</p>
<ul>
<li><code>'en'</code> (<code>'en-US'</code>)</li>
<li><code>'zh'</code> (<code>'zh-CN'</code>)</li>
<li><code>'pt'</code> (<code>'pt-BR'</code>)</li>
<li><code>'ja'</code> (<code>'ja-JP'</code>)</li>
</ul>
<p>欢迎贡献代码帮助 Vssue 支持更多语言。</p>
</div>
</li>
</ul>
<h2 id="proxy"> proxy</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>string | ((url: string) =&gt; string)</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>url =&gt; `https://cors-anywhere.herokuapp.com/${url}`</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>某些平台 (如 GitHub 和 Gitee) 不支持 Implicit Grant，所以我们必须通过请求平台的 API 来获取 Access Token。</p>
<p>然而，平台的 Access Token API 不支持 CORS (详见 <a href="https://github.com/isaacs/github/issues/330" target="_blank" rel="noopener noreferrer">GitHub 的相关 Issue<i>Content not supported</i></a>) 。由于 Vssue 是一个纯前端插件，我们必须要通过代理来请求 Access Token。</p>
<p>默认情况下，我们使用一个开源的 CORS 代理服务 <a href="https://github.com/Rob--W/cors-anywhere" target="_blank" rel="noopener noreferrer">cors-anywhere<i>Content not supported</i></a>。</p>
<p>如果你希望使用自己的代理，就需要设置这个选项。</p>
<p>如果你使用的平台不需要设置 <code>clientSecret</code>，那么该选项会被忽略。</p>
</li>
<li>
<p><strong>示例</strong>:</p>
<div><pre><code><span>proxy</span><span>:</span> <span>(</span><span>url</span><span>)</span> <span>=></span> <span><span>`</span><span>https://your.cors.porxy?target=</span><span><span>${</span>url<span>}</span></span><span>`</span></span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p><strong>参考</strong>:</p>
<ul>
<li></li>
</ul>
</li>
</ul>
<h2 id="issuecontent"> issueContent</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>((param: { options: Vssue.Options, url: string }) =&gt; string | Promise&lt;string&gt;)</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>({ url }) =&gt; url</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>Vssue 自动创建 Issue 时使用的内容。</p>
<p>Vssue 将使用该函数的返回值作为 Issue 的内容。</p>
<p>参数包含两个属性:</p>
<ul>
<li><code>options</code> 是 Vssue 的 options。</li>
<li><code>url</code> 是当前页面的 URL ，是 Vssue 生成 Issue 时默认使用的内容。</li>
</ul>
</li>
<li>
<p><strong>示例</strong>:</p>
<div><pre><code><span>issueContent</span><span>:</span> <span>(</span><span><span>{</span> url <span>}</span></span><span>)</span> <span>=></span>
  <span><span>`</span><span>这个 Issue 由 Vssue 自动创建，用来存储该页面的评论: </span><span><span>${</span>url<span>}</span></span><span>`</span></span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><p>Tips</p>
<p><code>issueContent</code> 只用来在对应 Issue 不存在时新建 Issue。</p>
<p>如果对应的 Issue 已经存在，Vssue 不会更新 Issue 的内容。</p>
</div>
</li>
</ul>
<h2 id="autocreateissue"> autoCreateIssue</h2>
<ul>
<li>
<p><strong>类型</strong>: <code>boolean</code></p>
</li>
<li>
<p><strong>默认值</strong>: <code>false</code></p>
</li>
<li>
<p><strong>详细</strong>:</p>
<p>如果 <code>autoCreateIssue</code> 设置为 <code>true</code>，在对应的 Issue 不存在时，Vssue 会自动尝试为你创建 Issue。注意，若你当前没有登录，则 Vssue 会自动跳转到平台的认证页面。</p>
<p>如果 <code>autoCreateIssue</code> 设置为 <code>false</code>，你必须手动创建 Issue。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>BitBucket OAuth Consumer</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/bitbucket.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/bitbucket.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">BitBucket OAuth Consumer</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="bitbucket-oauth-consumer"> BitBucket OAuth Consumer</h1>
<h2 id="创建一个新的-oauth-consumer"> 创建一个新的 OAuth Consumer</h2>
<ul>
<li>前往 <strong>Bitbucket settings - OAuth</strong></li>
<li>点击 <strong>Add consumer</strong></li>
</ul>
<p><img src="./assets/oauth-app-bitbucket-01.png" alt="配置 OAuth App - Bitbucket 01">
<img src="./assets/oauth-app-bitbucket-02.png" alt="配置 OAuth App - Bitbucket 02">
<img src="./assets/oauth-app-bitbucket-03.png" alt="配置 OAuth App - Bitbucket 03"></p>
<ul>
<li>将 <code>Callback URL</code> 设置为你的网站 URL (这里我们用 <code>localhost:8080</code> 作为示例)</li>
<li>取消选择 <code>This is a private consumer</code></li>
<li>勾选 <code>Account - Read</code> 和 <code>Issues - Write</code> 权限</li>
</ul>
<p><img src="./assets/oauth-app-bitbucket-04.png" alt="配置 OAuth App - Bitbucket 04">
<img src="./assets/oauth-app-bitbucket-05.png" alt="配置 OAuth App - Bitbucket 05"></p>
<h2 id="获取-client-id"> 获取 Client ID</h2>
<p>现在你已经创建了一个新的 OAuth Consumer，并得到了相应的 <strong>Key</strong> (<code>Client ID</code>).</p>
<p><img src="./assets/oauth-app-bitbucket-06.png" alt="配置 OAuth App - Bitbucket 06"></p>
<h2 id="配置并启动你的-vssue"> 配置并启动你的 Vssue</h2>
<p>复制 <code>Client ID</code>，并设置 <code>owner</code> 和 <code>repo</code>。</p>
<blockquote>
<p>Bitbucket repository 的 URL 模式为 <code>https://bitbucket.org/${owner}/${repo}</code></p>
</blockquote>
<p>这里我们以 <code>https://bitbucket.org/meteorlxy/vssue-demo</code> 为例，并把 issue 的 <code>title</code> 设置为 <code>Vssue Demo</code>。</p>
<p>然后运行 <code>anywhere -h localhost 8080</code>，在 <code>localhost:8080</code> 监听一个 http server 并返回 <code>index.html</code>。</p>
<p><img src="./assets/oauth-app-bitbucket-07.png" alt="配置 OAuth App - Bitbucket 07"></p>
<h2 id="在本地尝试-vssue"> 在本地尝试 Vssue</h2>
<p>Vssue 已经成功运行。点击 <code>Login</code> 使用 Bitbucket 帐号登录。</p>
<p><img src="./assets/oauth-app-bitbucket-08.png" alt="配置 OAuth App - Bitbucket 08"></p>
<p>重定向到 Bitbucket 授权页面。点击 <code>Grant access</code> 来登录。</p>
<p><img src="./assets/oauth-app-bitbucket-09.png" alt="配置 OAuth App - Bitbucket 09">
<img src="./assets/oauth-app-bitbucket-10.png" alt="配置 OAuth App - Bitbucket 10"></p>
<p>如果出现加载评论失败，你需要确认你的仓库是否开启了 <strong>Issue Tracker</strong> 功能。</p>
<p><img src="./assets/oauth-app-bitbucket-11.png" alt="配置 OAuth App - Bitbucket 11"></p>
<p>在当前页面写下评论吧 ~</p>
<p><img src="./assets/oauth-app-bitbucket-12.png" alt="配置 OAuth App - Bitbucket 12">
<img src="./assets/oauth-app-bitbucket-13.png" alt="配置 OAuth App - Bitbucket 13"></p>
<div><p>Tips</p>
<p>你可以前往 <a href="https://bitbucket.org/meteorlxy/vssue-demo" target="_blank" rel="noopener noreferrer">meteorlxy/vssue-demo<i>Content not supported</i></a> 来获取 demo 代码。前往该仓库的 <a href="https://bitbucket.org/meteorlxy/vssue-demo/issues/1" target="_blank" rel="noopener noreferrer">#1 issue<i>Content not supported</i></a> 看看发生了什么。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Gitee 第三方应用</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/gitee.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/gitee.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Gitee 第三方应用</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="gitee-第三方应用"> Gitee 第三方应用</h1>
<blockquote>
<p>Vssue 同样可以配合自己搭建的 Gitee 企业版 使用。只需要将 <code>baseURL</code> 设置为你的 Gitee URL 即可。</p>
<p>Gitee 需要设置 <code>clientSecret</code>，因为 Gitee 目前还不支持 implicit grant type</p>
</blockquote>
<h2 id="创建一个新的第三方应用"> 创建一个新的第三方应用</h2>
<ul>
<li>前往 <a href="https://gitee.com/oauth/applications" target="_blank" rel="noopener noreferrer">设置 - 第三方应用<i>Content not supported</i></a></li>
<li>点击 <a href="https://gitee.com/oauth/applications/new" target="_blank" rel="noopener noreferrer">创建应用<i>Content not supported</i></a></li>
</ul>
<p><img src="./assets/oauth-app-gitee-01.png" alt="配置 OAuth App - Gitee 01">
<img src="./assets/oauth-app-gitee-02.png" alt="配置 OAuth App - Gitee 02"></p>
<ul>
<li>将 <code>应用主页</code> 和 <code>应用回调地址</code> 设置为你的网站 URL (这里我们用 <code>localhost:8080</code> 作为示例)</li>
<li>权限选择 <code>issues</code> 和 <code>notes</code></li>
</ul>
<p><img src="./assets/oauth-app-gitee-03.png" alt="配置 OAuth App - Gitee 03"></p>
<h2 id="获取-client-id-和-secret"> 获取 Client ID 和 Secret</h2>
<p>现在你已经创建了一个新的第三方应用，并得到了相应的 <code>Client ID</code> 和 <code>Client Secret</code>。</p>
<p><img src="./assets/oauth-app-gitee-04.png" alt="配置 OAuth App - Gitee 04"></p>
<h2 id="配置并启动你的-vssue"> 配置并启动你的 Vssue</h2>
<p>复制 <code>Client ID</code> 和 <code>Client Secret</code>, 并设置 <code>owner</code> 和 <code>repo</code>。</p>
<blockquote>
<p>Gitee repository 的 URL 模式为 <code>https://gitee.com/${owner}/${repo}</code></p>
</blockquote>
<p>这里我们以 <code>https://gitee.com/meteor_lxy/vssue-demo</code> 为例，并把 issue 的 <code>title</code> 设置为 <code>Vssue Demo</code>。</p>
<p>然后运行 <code>anywhere -h localhost 8080</code>，在 <code>localhost:8080</code> 监听一个 http server 并返回 <code>index.html</code>。</p>
<p><img src="./assets/oauth-app-gitee-05.png" alt="配置 OAuth App - Gitee 05"></p>
<h2 id="在本地尝试-vssue"> 在本地尝试 Vssue</h2>
<p>Vssue 已经成功运行。点击 <code>Login</code> 使用 Gitee 帐号登录，并通过 <code>Click to create issue</code> 创建 Issue。</p>
<p><img src="./assets/oauth-app-gitee-06.png" alt="配置 OAuth App - Gitee 06"></p>
<p>重定向到 Gitee 授权页面。点击 <code>同意授权</code> 来登录。</p>
<p><img src="./assets/oauth-app-gitee-07.png" alt="配置 OAuth App - Gitee 07"></p>
<p>在当前页面写下评论吧 ~</p>
<p><img src="./assets/oauth-app-gitee-08.png" alt="配置 OAuth App - Gitee 08"></p>
<p><img src="./assets/oauth-app-gitee-09.png" alt="配置 OAuth App - Gitee 09"></p>
<div><p>提示</p>
<p>你可以前往 <a href="https://gitee.com/meteor_lxy/vssue-demo" target="_blank" rel="noopener noreferrer">meteor_lxy/vssue-demo<i>Content not supported</i></a> 来获取 demo 代码。前往该仓库的 <a href="https://gitee.com/meteor_lxy/vssue-demo/issues/IWWTA" target="_blank" rel="noopener noreferrer">第一个 issue<i>Content not supported</i></a> 看看发生了什么。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>GitHub OAuth App</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/github.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/github.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">GitHub OAuth App</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="github-oauth-app"> GitHub OAuth App</h1>
<blockquote>
<p>Vssue 同样可以配合自己搭建的 GitHub Enterprise Server 使用。只需要将 <code>baseURL</code> 设置为你的 GitHub URL 即可。</p>
<p>GitHub 需要设置 <code>clientSecret</code>，因为 <a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener noreferrer">GitHub 目前还不支持 implicit grant type<i>Content not supported</i></a></p>
<p><img src="./assets/oauth-app-github-00.png" alt="Set up OAuth App - GitHub 00"></p>
</blockquote>
<h2 id="创建一个新的-oauth-app"> 创建一个新的 OAuth App</h2>
<ul>
<li>前往 <a href="https://github.com/settings/developers" target="_blank" rel="noopener noreferrer">Settings - Developer Settings - OAuth Apps<i>Content not supported</i></a></li>
<li>点击 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener noreferrer">New OAuth App<i>Content not supported</i></a></li>
</ul>
<p><img src="./assets/oauth-app-github-01.png" alt="配置 OAuth App - GitHub 01">
<img src="./assets/oauth-app-github-02.png" alt="配置 OAuth App - GitHub 02">
<img src="./assets/oauth-app-github-03.png" alt="配置 OAuth App - GitHub 03"></p>
<ul>
<li>将 <code>Homepage URL</code> 和 <code>Authorization callback URL</code> 设置为你的网站 URL (这里我们用 <code>localhost:8080</code> 作为示例)</li>
</ul>
<p><img src="./assets/oauth-app-github-04.png" alt="配置 OAuth App - GitHub 04"></p>
<h2 id="获取-client-id-和-secret"> 获取 Client ID 和 Secret</h2>
<p>现在你已经创建了一个新的 OAuth App，并得到了相应的 <code>Client ID</code> 和 <code>Client Secret</code>。</p>
<p><img src="./assets/oauth-app-github-05.png" alt="配置 OAuth App - GitHub 05"></p>
<h2 id="配置并启动你的-vssue"> 配置并启动你的 Vssue</h2>
<p>复制 <code>Client ID</code> 和 <code>Client Secret</code>, 并设置 <code>owner</code> 和 <code>repo</code>。</p>
<blockquote>
<p>GitHub repository 的 URL 模式为 <code>https://github.com/${owner}/${repo}</code></p>
</blockquote>
<p>这里我们以 <code>https://github.com/meteorlxy/vssue-demo</code> 为例，并把 issue 的 <code>title</code> 设置为 <code>Vssue Demo</code>。</p>
<p>然后运行 <code>anywhere -h localhost 8080</code>，在 <code>localhost:8080</code> 监听一个 http server 并返回 <code>index.html</code>。</p>
<p><img src="./assets/oauth-app-github-06.png" alt="配置 OAuth App - GitHub 06"></p>
<h2 id="在本地尝试-vssue"> 在本地尝试 Vssue</h2>
<p>Vssue 已经成功运行。点击 <code>Login</code> 使用 GitHub 帐号登录。</p>
<p><img src="./assets/oauth-app-github-07.png" alt="配置 OAuth App - GitHub 07"></p>
<p>重定向到 GitHub 授权页面。点击 <code>Authorize ${你的帐号}</code> 来登录。</p>
<p><img src="./assets/oauth-app-github-08.png" alt="配置 OAuth App - GitHub 08"></p>
<p>在当前页面写下评论吧 ~</p>
<p><img src="./assets/oauth-app-github-09.png" alt="配置 OAuth App - GitHub 09"></p>
<p><img src="./assets/oauth-app-github-10.png" alt="配置 OAuth App - GitHub 10"></p>
<div><p>Tips</p>
<p>你可以前往 <a href="https://github.com/meteorlxy/vssue-demo" target="_blank" rel="noopener noreferrer">meteorlxy/vssue-demo<i>Content not supported</i></a> 来获取 demo 代码。前往该仓库的 <a href="https://github.com/meteorlxy/vssue-demo/issues/1" target="_blank" rel="noopener noreferrer">#1 issue<i>Content not supported</i></a> 看看发生了什么。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>GitLab Application</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/gitlab.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/gitlab.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">GitLab Application</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="gitlab-application"> GitLab Application</h1>
<blockquote>
<p>查看 <a href="https://docs.gitlab.com/ce/integration/oauth_provider.html#adding-an-application-through-the-profile" target="_blank" rel="noopener noreferrer">Gitlab 官方文档<i>Content not supported</i></a> 作为参考。
Vssue 同样可以配合自己搭建的 GitLab 使用。只需要将 <code>baseURL</code> 设置为你的 Gitlab URL 即可。</p>
</blockquote>
<h2 id="创建一个新的-application"> 创建一个新的 Application</h2>
<ul>
<li>前往 <a href="https://gitlab.com/profile/applications" target="_blank" rel="noopener noreferrer">Settings - Applications<i>Content not supported</i></a></li>
</ul>
<p><img src="./assets/oauth-app-gitlab-01.png" alt="配置 OAuth App - Gitlab 01">
<img src="./assets/oauth-app-gitlab-02.png" alt="配置 OAuth App - Gitlab 02"></p>
<ul>
<li>将 <code>Redirect URI</code> 设置为你的网站 URL (这里我们用 <code>localhost:8080</code> 作为示例)</li>
<li>勾选 <code>api</code> scope</li>
</ul>
<p><img src="./assets/oauth-app-gitlab-03.png" alt="配置 OAuth App - Gitlab 03"></p>
<h2 id="获取-client-id"> 获取 Client ID</h2>
<p>现在你已经创建了一个新的 Application，并得到了相应的 <strong>Application ID</strong> (<code>Client ID</code>)。</p>
<p><img src="./assets/oauth-app-gitlab-04.png" alt="配置 OAuth App - Gitlab 04"></p>
<h2 id="配置并启动你的-vssue"> 配置并启动你的 Vssue</h2>
<p>复制 <code>Client ID</code>，并设置 <code>owner</code> 和 <code>repo</code>。</p>
<blockquote>
<p>Gitlab repository 的 URL 模式为 <code>https://gitlab.com/${owner}/${repo}</code></p>
</blockquote>
<p>这里我们以 <code>https://gitlab.com/meteorlxy/vssue-demo</code> 为例，并把 issue 的 <code>title</code> 设置为 <code>Vssue Demo</code>。</p>
<p>然后运行 <code>anywhere -h localhost 8080</code>，在 <code>localhost:8080</code> 监听一个 http server 并返回 <code>index.html</code>。</p>
<p><img src="./assets/oauth-app-gitlab-05.png" alt="配置 OAuth App - Gitlab 05"></p>
<h2 id="在本地尝试-vssue"> 在本地尝试 Vssue</h2>
<p>Vssue 已经成功运行。点击 <code>Login</code> 使用 Gitlab 帐号登录。</p>
<p><img src="./assets/oauth-app-gitlab-06.png" alt="配置 OAuth App - Gitlab 06"></p>
<p>重定向到 Gitlab 授权页面。点击 <code>Authorize</code> 来登录。</p>
<p><img src="./assets/oauth-app-gitlab-07.png" alt="配置 OAuth App - Gitlab 07"></p>
<p>在当前页面写下评论吧 ~</p>
<p><img src="./assets/oauth-app-gitlab-08.png" alt="配置 OAuth App - Gitlab 08">
<img src="./assets/oauth-app-gitlab-09.png" alt="配置 OAuth App - Gitlab 09"></p>
<div><p>Tips</p>
<p>你可以前往 <a href="https://gitlab.com/meteorlxy/vssue-demo" target="_blank" rel="noopener noreferrer">meteorlxy/vssue-demo<i>Content not supported</i></a> 来获取 demo 代码。前往该仓库的 <a href="https://gitlab.com/meteorlxy/vssue-demo/issues/1" target="_blank" rel="noopener noreferrer">#1 issue<i>Content not supported</i></a> 看看发生了什么。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>支持的代码托管平台</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/supported-platforms.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/supported-platforms.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">支持的代码托管平台</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="支持的代码托管平台"> 支持的代码托管平台</h1>
<h2 id="github"> GitHub</h2>
<p>指南: <a href="./github.html">创建 GitHub OAuth App</a></p>
<h3 id="github-rest-api-v3"> GitHub REST API V3</h3>
<ul>
<li>Vssue API 包: <a href="https://www.npmjs.com/package/@vssue/api-github-v3" target="_blank" rel="noopener noreferrer">@vssue/api-github-v3<i>Content not supported</i></a></li>
<li>特点 / 缺点:
<ul>
<li>需要设置 clientSecret</li>
<li>评论无法排序</li>
<li>评论可以编辑</li>
<li>评论可以删除</li>
<li>可以不登录浏览评论，但 API 有调用频率限制</li>
</ul>
</li>
<li>开发者参考: <a href="https://developer.github.com/v3" target="_blank" rel="noopener noreferrer">官方文档<i>Content not supported</i></a></li>
</ul>
<h3 id="github-graphql-api-v4"> GitHub GraphQL API V4</h3>
<ul>
<li>Vssue API 包: <a href="https://www.npmjs.com/package/@vssue/api-github-v4" target="_blank" rel="noopener noreferrer">@vssue/api-github-v4<i>Content not supported</i></a></li>
<li>特点 / 缺点:
<ul>
<li>需要设置 clientSecret</li>
<li>评论可以排序</li>
<li>评论可以编辑</li>
<li>评论可以删除</li>
<li>要求登陆后才能浏览评论</li>
</ul>
</li>
<li>开发者参考: <a href="https://developer.github.com/v4" target="_blank" rel="noopener noreferrer">官方文档<i>Content not supported</i></a></li>
</ul>
<h2 id="gitlab"> GitLab</h2>
<p>指南: <a href="./gitlab.html">创建 GitLab Application</a></p>
<h3 id="gitlab-api-v4-gitlab-v11-0"> Gitlab API V4 (Gitlab v11.0+)</h3>
<ul>
<li>Vssue API 包: <a href="https://www.npmjs.com/package/@vssue/api-gitlab-v4" target="_blank" rel="noopener noreferrer">@vssue/api-gitlab-v4<i>Content not supported</i></a></li>
<li>特点 / 缺点:
<ul>
<li>评论可以排序</li>
<li>评论可以编辑</li>
<li>评论可以删除</li>
<li>要求登陆后才能浏览评论</li>
</ul>
</li>
<li>开发者参考: <a href="https://docs.gitlab.com/ce/api" target="_blank" rel="noopener noreferrer">官方文档<i>Content not supported</i></a></li>
</ul>
<h2 id="bitbucket"> Bitbucket</h2>
<p>指南: <a href="./bitbucket.html">创建 Bitbucket OAuth Consumer</a></p>
<h3 id="bitbucket-api-v2"> Bitbucket API V2</h3>
<ul>
<li>Vssue API 包 <a href="https://www.npmjs.com/package/@vssue/api-bitbucket-v2" target="_blank" rel="noopener noreferrer">@vssue/api-bitbucket-v2<i>Content not supported</i></a></li>
<li>特点 / 缺点:
<ul>
<li>评论可以排序</li>
<li>评论可以编辑</li>
<li>评论可以删除</li>
<li>可以不登录浏览评论</li>
<li>不能对评论做出 emoji 响应 (喜欢、点赞、踩 等)</li>
</ul>
</li>
<li>开发者参考: <a href="https://developer.atlassian.com/bitbucket/api/2/reference" target="_blank" rel="noopener noreferrer">官方文档<i>Content not supported</i></a></li>
</ul>
<h2 id="gitee"> Gitee</h2>
<p>指南: <a href="./gitee.html">创建 Gitee 第三方应用</a></p>
<h3 id="gitee-api-v5"> Gitee API V5</h3>
<ul>
<li>Vssue API 包: <a href="https://www.npmjs.com/package/@vssue/api-gitee-v5" target="_blank" rel="noopener noreferrer">@vssue/api-gitee-v5<i>Content not supported</i></a></li>
<li>特点 / 缺点:
<ul>
<li>需要设置 clientSecret</li>
<li>评论无法排序</li>
<li>评论可以编辑</li>
<li>评论可以删除</li>
<li>可以不登录浏览评论，但 API 有调用频率限制</li>
<li>不能对评论做出 emoji 响应 (喜欢、点赞、踩 等)</li>
</ul>
</li>
<li>开发者参考: <a href="https://gitee.com/api/v5/swagger" target="_blank" rel="noopener noreferrer">官方文档<i>Content not supported</i></a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Valine</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/valine.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/valine.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">Valine</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="valine"> Valine</h1>
<p>借助 Valine，插件实现了无后端开启阅读量展示与评论功能。</p>
<h2 id="获取-app-id-和-app-key"> 获取 APP ID 和 APP Key</h2>
<p>请先 <a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener noreferrer">登录<i>Content not supported</i></a> 或 <a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener noreferrer">注册<i>Content not supported</i></a> LeanCloud, 进入控制台后点击左下角创建应用。</p>
<p>应用创建好以后，进入刚刚创建的应用，选择左下角的 <code>设置 &gt; 应用 Key</code>，然后就能看到你的 <code>APP ID</code> 和 <code>APP Key</code> 了。</p>
<div><pre><code>options <span>=</span> <span>{</span>
  <span>type</span><span>:</span> <span>"valine"</span><span>,</span>
  <span>appId</span><span>:</span> <span>"..."</span><span>,</span> <span>// your appId</span>
  <span>appKey</span><span>:</span> <span>"..."</span><span>,</span> <span>// your appKey</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>将对应的 <code>APP ID</code> 和 <code>APP Key</code> 填入， Valine 即配置完成。</p>
<p>Valine 评论的其他配置将在 <a href="./../config/valine.html">配置</a> 中列出。</p>
<div><p>Tips</p>
<p>更多配置与使用，请见 <a href="https://valine.js.org" target="_blank" rel="noopener noreferrer">Valine 官方文档<i>Content not supported</i></a>。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>使用 Vssue</title>
      <link>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/vssue.html</link>
      <guid>https://vuepress-theme-hope.github.io/v1/comment/zh/guide/vssue.html</guid>
      <source url="https://vuepress-theme-hope.github.io/v1/comment/rss.xml">使用 Vssue</source>
      <pubDate>Tue, 13 Oct 2020 05:36:44 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="使用-vssue"> 使用 Vssue</h1>
<h2 id="选择你要使用的代码托管平台"> 选择你要使用的代码托管平台</h2>
<p>Vssue 支持通过 GitHub, Gitlab, Bitbucket 或者 Gitee 的 Issue 系统来为你的静态页面提供评论功能，你可以选择其中之一来使用。</p>
<p>前往 <a href="./supported-platforms.html">支持的代码托管平台 - 创建 OAuth App</a> 查看详细指引。</p>
<p>完成这一步之后，你将会配置好一个 OAuth App，并得到对应的 <code>client id</code> 和 <code>client secret</code>，它们将会用于 Vssue 的使用。</p>
<ul>
<li><code>owner</code>: 对应 repository 的拥有者帐号或者团队</li>
<li><code>repo</code>: 用来存储评论的 repository</li>
<li><code>clientId</code>: OAuth App 的 <code>client id</code></li>
<li><code>clientSecret</code>: OAuth App 的 <code>client secret</code> (只有在使用某些平台时需要)</li>
</ul>
<h2 id="vssue-配置"> Vssue 配置</h2>
<p>本插件通过 Vssue 提供的 <a href="https://www.npmjs.com/package/@vssue/vuepress-plugin-vssue" target="_blank" rel="noopener noreferrer">@vssue/vuepress-plugin-vssue<i>Content not supported</i></a> 来帮助你在 VuePress 中快速使用 Vssue。</p>
<h3 id="使用插件"> 使用插件</h3>
<CodeGroup>
<CodeGroupItem title=" ts">
<div><pre><code><span>// .vuepress/config.ts</span>

<span>export</span> <span>default</span> <span>{</span>
  <span>plugins</span><span>:</span> <span>{</span>
    <span>comment1</span><span>:</span> <span>{</span>
      <span>type</span><span>:</span> <span>"vssue"</span><span>,</span>
      <span>// 设置 `platform` 而不是 `api`</span>
      <span>platform</span><span>:</span> <span>"github"</span><span>,</span>

      <span>// 其他的 Vssue 配置</span>
      <span>owner</span><span>:</span> <span>"OWNER_OF_REPO"</span><span>,</span>
      <span>repo</span><span>:</span> <span>"NAME_OF_REPO"</span><span>,</span>
      <span>clientId</span><span>:</span> <span>"YOUR_CLIENT_ID"</span><span>,</span>
      <span>clientSecret</span><span>:</span> <span>"YOUR_CLIENT_SECRET"</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></CodeGroupItem>
<CodeGroupItem title=" js">
<div><pre><code><span>// .vuepress/config.js</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>plugins</span><span>:</span> <span>{</span>
    <span>comment1</span><span>:</span> <span>{</span>
      <span>type</span><span>:</span> <span>"vssue"</span><span>,</span>
      <span>// 设置 `platform` 而不是 `api`</span>
      <span>platform</span><span>:</span> <span>"github"</span><span>,</span>

      <span>// 其他的 Vssue 配置</span>
      <span>owner</span><span>:</span> <span>"OWNER_OF_REPO"</span><span>,</span>
      <span>repo</span><span>:</span> <span>"NAME_OF_REPO"</span><span>,</span>
      <span>clientId</span><span>:</span> <span>"YOUR_CLIENT_ID"</span><span>,</span>
      <span>clientSecret</span><span>:</span> <span>"YOUR_CLIENT_SECRET"</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></CodeGroupItem>
</CodeGroup>
<div><p>Tips</p>
<p>唯一的区别在于，你需要设置 <code>platform</code> 而不是对应的 <code>api</code> 包。</p>
<p><code>@vssue/vuepress-plugin-vssue</code> 会自动根据你设置的 <code>platform</code> 为你解析对应的 API 包:</p>
<ul>
<li>Platform <code>github</code> - API 包 <code>@vssue/api-github-v3</code></li>
<li>Platform <code>github-v4</code> - API 包 <code>@vssue/api-github-v4</code></li>
<li>Platform <code>gitlab</code> - API 包 <code>@vssue/api-gitlab-v4</code></li>
<li>Platform <code>bitbucket</code> - API 包 <code>@vssue/api-bitbucket-v2</code></li>
<li>Platform <code>gitee</code> - API 包 <code>@vssue/api-gitee-v5</code></li>
</ul>
</div>
<h3 id="使用-vssue-组件"> 使用 Vssue 组件</h3>
<p><code>Vssue</code> 已经注册为 Vue 组件，你可以在你的 VuePress Markdown 文件中直接使用它。</p>
<div><pre><code><span>&lt;!-- README.md --></span>

<span><span>#</span> Vssue Demo</span>

<span><span><span>&lt;</span>Vssue</span> <span>title</span><span><span>=</span><span>"</span>Vssue Demo<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="自定义样式变量"> 自定义样式变量</h3>
<p>通过 VuePress 的 <a href="https://vuepress.vuejs.org/zh/config/#palette-styl" target="_blank" rel="noopener noreferrer">palette.styl<i>Content not supported</i></a>，你可以很轻松地修改 Vssue 的样式变量。</p>
<p>Vssue 样式中预定义了一些 <a href="http://stylus-lang.com/docs/variables.html" target="_blank" rel="noopener noreferrer">Stylus 变量<i>Content not supported</i></a>，你可以在 <code>vssue/src/styles/_variables.styl</code> 中查看它们:</p>
<div><pre><code><span>// 主题颜色</span>
$vssue-theme-color

<span>// 文字颜色  (用于普通文字)</span>
$vssue-text-color

<span>// 浅色文字颜色  (用于备注等文字)</span>
$vssue-text-light-color

<span>// 边框颜色</span>
$vssue-border-color

<span>// 进度条颜色</span>
$vssue-progress-color

<span>// 文字大小</span>
$vssue-font-size

<span>// 字体</span>
$vssue-font-family

<span>// 切换为移动端模式的屏幕宽度</span>
$vssue-breakpoint-mobile

<span>// 文字方向 (ltr / rtl)  (为 RTL 语言使用，如希伯来语等)</span>
$vssue-direction
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>举例来说，Vssue 默认使用一个“Vue 绿色” (<code>#3eaf7c</code>) 作为主题颜色，并将其设置为 <code>$vssue-theme-color</code> 的默认值。你可以在引入 <code>vssue/src/styles/index.styl</code> 之前设置 <code>$vssue-theme-color</code> 的值来改变主题颜色。</p>
<p>默认情况下，下面这些 Vssue 的样式变量与 VuePress 的样式变量相等:</p>
<div><pre><code><span>// @vssue/vuepress-plugin-vssue/styles/index.styl</span>

<span><span>$vssue-theme-color</span> <span>?=</span> $accentColor</span>
<span><span>$vssue-text-color</span> <span>?=</span> $textColor</span>
<span><span>$vssue-border-color</span> <span>?=</span> $borderColor</span>
<span><span>$vssue-breakpoint-mobile</span> <span>?=</span> $MQMobile</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>如果你想要覆盖它们，在你的 <code>palette.styl</code> 中设置即可:</p>
<div><pre><code><span>// .vuepress/styles/palette.styl</span>

<span><span>$accentColor</span> <span>=</span> <span>blue</span></span>

<span><span>$vssue-theme-color</span> <span>=</span> <span>red</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="不想使用-vssue-插件"> 不想使用 Vssue 插件</h2>
<p>Vssue 是适配 SSR 的，所以你可以不使用 <code>@vssue/vuepress-plugin-vssue</code>，而是像其他 Vue 插件 / 组件一样，在 VuePress 中直接引入 Vssue (尤其是在你对 Vssue 的样式进行了自定义的时候) 。</p>
<p>但是我们仍然建议你在 VuePress 中通过 <code>@vssue/vuepress-plugin-vssue</code> 来使用 Vssue，该插件已经帮助你仅在客户端加载 Vssue 来避免一些潜在的问题。</p>
<p>如果你不想使用我们提供的插件，你可能需要将 <code>&lt;Vssue&gt;</code> 组件放置在 <code>&lt;ClientOnly&gt;</code> 组件中来避免这些潜在的问题，即:</p>
<div><pre><code><span><span><span>&lt;</span>ClientOnly</span><span>></span></span>
  <span><span><span>&lt;</span>Vssue</span> <span>/></span></span>
<span><span><span>&lt;/</span>ClientOnly</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>参考 VuePress <a href="https://vuepress.vuejs.org/zh/guide/using-vue.html#clientonly" target="_blank" rel="noopener noreferrer">内置的组件 - ClientOnly<i>Content not supported</i></a></p>
</blockquote>
]]></content:encoded>
    </item>
  </channel>
</rss>